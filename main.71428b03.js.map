{"version":3,"sources":["js/view.js","js/model.js","js/utils.js","js/game.js","js/main.js"],"names":["COUNTER_NEG","cNEG","COUNTER_SRC","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","FACE_BASE","FACE_LOST","FACE_WON","View","EventTarget","model","globalOptions","tileSize","calculateTileSize","playground","document","getElementById","face","controls","style","setProperty","cols","rows","firstChild","removeChild","setNumber","Counters","MINES","mineCount","initViewListeners","listeners","onPlaygroundClick","bind","onPlaygroundRightClick","onResize","addEventListener","window","event","resize","preventDefault","dispatch","locateClickFromEvent","eventName","detail","CustomEvent","dispatchEvent","box","getBoundingClientRect","translationX","clientX","left","translationY","clientY","top","row","Math","floor","col","console","log","x","y","map","forEach","adjacent","setTile","Tiles","NUMBER","tileType","n","qs","querySelector","tile","createElement","classList","add","dataset","gridColumn","gridRow","FLAG","MARK","MINE","MINE_BOOM","INCORRECT_MINE","replaceWith","appendChild","lostCoords","isMine","isFlagged","which","counter","error","TIME","isNegative","src","sizeBaseline","mainCont","uiWidth","clientWidth","uiHeight","clientHeight","maxHeight","body","maxWidth","size","min","removeEventListener","Object","getPrototypeOf","Model","mines","length","parseField","field","mineList","markedFlags","view","fld","lst","c","i","FieldFlags","push","undefined","REVEALED","isRecursive","Error","isRevealed","getAdjacentCount","concat","revealTile","revealed","revealMap","dropFlag","dropTile","MarkTypes","UNKNOWN","FLAGGED","MARKED","UNMARKED","count","_revealed","randomInt","max","random","DEFAULT_GLOBAL_OPTIONS","freeze","marks","Game","generateMines","bindView","gameStarted","interactuable","initListeners","startTimer","stopTimer","timerOn","timerStart","performance","now","setTimeout","doTimer","nextTimer","startGame","stopGame","gameLost","isComplete","gameWon","getTileType","markTileFlag","markTile","unmarkTile","destroy","rowCount","colCount","rnd","includes","GAME_MODES","gi","difficulty","newGame","game","g","call","params","assign","Array","from","querySelectorAll","li","contains","remove","l","changeDifficulty","target","action","toggle"],"mappings":"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","file":"main.71428b03.js","sourceRoot":"..\\src","sourcesContent":["import c0   from \"../static/number_0.gif\";\r\nimport c1   from \"../static/number_1.gif\";\r\nimport c2   from \"../static/number_2.gif\";\r\nimport c3   from \"../static/number_3.gif\";\r\nimport c4   from \"../static/number_4.gif\";\r\nimport c5   from \"../static/number_5.gif\";\r\nimport c6   from \"../static/number_6.gif\";\r\nimport c7   from \"../static/number_7.gif\";\r\nimport c8   from \"../static/number_8.gif\";\r\nimport c9   from \"../static/number_9.gif\";\r\nimport cNEG from \"../static/number_neg.gif\";\r\nconst COUNTER_NEG = cNEG;\r\nconst COUNTER_SRC = [ c0, c1, c2, c3, c4, c5, c6, c7, c8, c9 ];\r\n\r\nconst FACE_BASE = \"0px\";\r\nconst FACE_LOST = \"-80px\";\r\nconst FACE_WON = \"-120px\";\r\n\r\nclass View extends EventTarget {\r\n    constructor({ model, globalOptions }) {\r\n        super();\r\n\r\n        this.globalOptions = globalOptions;\r\n        this.model = model;\r\n        this.tileSize = this.calculateTileSize();\r\n\r\n        this.playground = document.getElementById(\"playground\");\r\n        this.face = document.getElementById(\"face-button\");\r\n        this.controls = document.getElementById(\"controls\");\r\n\r\n        this.controls.style.setProperty(\"--face-position\", FACE_BASE);\r\n\r\n        this.playground.style.setProperty(\"--cols\", this.model.cols);\r\n        this.playground.style.setProperty(\"--rows\", this.model.rows);\r\n\r\n        this.playground.style.setProperty(\"--tile-size\", this.tileSize + \"px\");\r\n\r\n        while (this.playground.firstChild) {\r\n            this.playground.removeChild(this.playground.firstChild);\r\n        }\r\n\r\n        this.setNumber(View.Counters.MINES, this.model.mineCount);\r\n\r\n        this.initViewListeners();\r\n    }\r\n\r\n    initViewListeners() {\r\n        this.listeners = [\r\n            this.onPlaygroundClick.bind(this),\r\n            this.onPlaygroundRightClick.bind(this),\r\n            this.onResize.bind(this),\r\n        ];\r\n        this.playground.addEventListener(\"click\", this.listeners[0]);\r\n        this.playground.addEventListener(\"contextmenu\", this.listeners[1]);\r\n        window.addEventListener(\"resize\", this.listeners[2]);\r\n    }\r\n\r\n    onResize(event) {\r\n        if (this.globalOptions.resize) {\r\n            this.tileSize = this.calculateTileSize();\r\n            this.playground.style.setProperty(\"--tile-size\", this.tileSize + \"px\");\r\n        }\r\n    }\r\n\r\n    onPlaygroundClick(event) {\r\n        event.preventDefault();\r\n        this.dispatch(\"click\", this.locateClickFromEvent(event));\r\n    }\r\n\r\n    onPlaygroundRightClick(event) {\r\n        event.preventDefault();\r\n        this.dispatch(\"rightClick\", this.locateClickFromEvent(event));\r\n    }\r\n\r\n    dispatch(eventName, detail) {\r\n        let event = new CustomEvent(eventName, {\r\n            detail,\r\n        });\r\n        this.dispatchEvent(event);\r\n    }\r\n\r\n    locateClickFromEvent(event) {\r\n        let box = this.playground.getBoundingClientRect();\r\n        let translationX = event.clientX - box.left;\r\n        let translationY = event.clientY - box.top;\r\n        let row = Math.floor(translationY / this.tileSize);\r\n        let col = Math.floor(translationX / this.tileSize);\r\n\r\n        console.log(`Click en {${col},${row}}`)\r\n        return {\r\n            x: col,\r\n            y: row,\r\n        };\r\n    }\r\n\r\n    revealMap(map) {\r\n        // map = [ {x, y, adjacent } ]\r\n        map.forEach(({ x, y, adjacent}) => this.setTile(x, y, View.Tiles.NUMBER, adjacent));\r\n    }\r\n    setTile(x, y, tileType, n) {\r\n        let qs = this.playground.querySelector(`[data-row=\"${y}\"][data-col=\"${x}\"]`);\r\n\r\n        let tile = document.createElement(\"i\");\r\n        tile.classList.add(\"tile\");\r\n        tile.dataset.row = y;\r\n        tile.dataset.col = x;\r\n        tile.style.gridColumn = x + 1; // grid is 1-indexed\r\n        tile.style.gridRow = y + 1;\r\n        switch (tileType) {\r\n            case View.Tiles.FLAG:\r\n                tile.classList.add(\"flag\");\r\n            break;\r\n            case View.Tiles.MARK:\r\n                tile.classList.add(\"mark\");\r\n            break;\r\n            case View.Tiles.NUMBER:\r\n                tile.classList.add(`number-${n}`);\r\n            break;\r\n            case View.Tiles.MINE:\r\n                tile.classList.add(\"mine\");\r\n            break;\r\n            case View.Tiles.MINE_BOOM:\r\n                tile.classList.add(\"mine-exploded\");\r\n            break;\r\n            case View.Tiles.INCORRECT_MINE:\r\n                tile.classList.add(\"incorrect-mine\");\r\n            break;\r\n        }\r\n        \r\n        if (qs) {\r\n            qs.replaceWith(tile);\r\n        } else {\r\n            this.playground.appendChild(tile);\r\n        }\r\n    }\r\n\r\n    dropTile(x, y) {\r\n        let qs = this.playground.querySelector(`[data-row=\"${y}\"][data-col=\"${x}\"]`);\r\n        if (qs) {\r\n            this.playground.removeChild(qs);\r\n        }\r\n    }\r\n\r\n    // ¿No necesita la view una referencia al model?\r\n    gameLost(lostCoords) {\r\n        this.controls.style.setProperty(\"--face-position\", FACE_LOST);\r\n        for (let x = 0; x < this.model.cols; x++) {\r\n            for (let y = 0; y < this.model.rows; y++) {\r\n                console.log(x + \"-\" + y + \"-\" + this.model.isMine(x, y) + \"-\" + this.model.isFlagged(x, y));\r\n                if (this.model.isMine(x, y) && !this.model.isFlagged(x, y)) {\r\n                    this.setTile(\r\n                        x,\r\n                        y,\r\n                        lostCoords.x === x && lostCoords.y === y ? View.Tiles.MINE_BOOM : View.Tiles.MINE\r\n                    );\r\n                } else if (this.model.isMine(x, y) && this.model.isFlagged(x, y)) {\r\n                    this.setTile(x, y, View.Tiles.INCORRECT_MINE);\r\n                }\r\n            }\r\n        }\r\n        // for (let minePos of this.model.mineList) {\r\n        //     this.setTile(\r\n        //         minePos.x,\r\n        //         minePos.y,\r\n        //         lostCoords.x === minePos.x && lostCoords.y === minePos.y ? View.Tiles.MINE_BOOM : View.Tiles.MINE\r\n        //     );\r\n        // }\r\n    }\r\n\r\n    gameWon() {\r\n        this.controls.style.setProperty(\"--face-position\", FACE_WON);\r\n    }\r\n\r\n    setNumber(which, n) {\r\n        if (n >= 1000 || n <= -1000) {\r\n            console.error(`setNumber(${which}, ${n}): n too big`);\r\n            n = n % 1000;\r\n        }\r\n\r\n        let counter;\r\n        switch (which) {\r\n            case View.Counters.MINES:\r\n                counter = document.getElementById(\"mine-counter\");\r\n            break;\r\n            case View.Counters.TIME:\r\n                counter = document.getElementById(\"time-counter\");\r\n            break;\r\n        }\r\n\r\n        let isNegative = false;\r\n        if (n < 0) {\r\n            isNegative = true;\r\n            n *= -1;\r\n        }\r\n        counter.querySelector(`img:nth-child(1)`).src = isNegative ? COUNTER_NEG : COUNTER_SRC[Math.floor(n / 100)];\r\n        counter.querySelector(`img:nth-child(2)`).src = COUNTER_SRC[Math.floor((n % 100) / 10)];\r\n        counter.querySelector(`img:nth-child(3)`).src = COUNTER_SRC[Math.floor(n % 10)];\r\n    }\r\n\r\n    calculateTileSize() {\r\n        if (!View.sizeBaseline) {\r\n            let mainCont = document.getElementById(\"full-container\");\r\n            let controls = document.getElementById(\"controls\");\r\n    \r\n            View.sizeBaseline = {\r\n                uiWidth: controls.clientWidth - mainCont.clientWidth,\r\n                uiHeight: -mainCont.clientHeight,\r\n            };\r\n        }\r\n\r\n        // Height uses mainCont height\r\n        let maxHeight = document.body.clientHeight + View.sizeBaseline.uiHeight;\r\n        // But width is just the borders... so CONTAINER - Controls-width\r\n        let maxWidth = document.body.clientWidth + View.sizeBaseline.uiWidth;\r\n\r\n        let size = Math.min(maxWidth / this.model.cols, maxHeight / this.model.rows);\r\n\r\n        // floor...?\r\n        size = Math.floor(size);\r\n\r\n        return size;\r\n    }\r\n\r\n    destroy() {\r\n        this.playground.removeEventListener(\"click\", this.listeners[0]);\r\n        this.playground.removeEventListener(\"contextmenu\", this.listeners[1]);\r\n        window.removeEventListener(\"resize\", this.listeners[2]);\r\n    }\r\n}\r\n\r\nObject.getPrototypeOf(View).Tiles = {\r\n    FLAG: 0,\r\n    MARK: 1,\r\n    NUMBER: 2,\r\n    MINE: 3,\r\n    MINE_BOOM: 4,\r\n    INCORRECT_MINE: 5,\r\n};\r\n\r\nObject.getPrototypeOf(View).Counters = {\r\n    MINES: 0,\r\n    TIME: 1,\r\n};\r\n\r\nexport { View };","import { View } from './view';\r\n\r\nclass Model {\r\n\r\n    constructor({ cols, rows, mines }) {\r\n        this.cols = cols;\r\n        this.rows = rows;\r\n        this.mineCount = mines.length;\r\n        [ this.field, this.mineList ] = this.parseField(mines);\r\n        console.log(this.field);\r\n        console.log(this.mineList);\r\n\r\n        // Intermediate - could be inferred from this.field to avoid mishaps\r\n        this.markedFlags = 0;\r\n    }\r\n\r\n    bindView(view) {\r\n        this.view = view;\r\n    }\r\n\r\n    get revealed() {\r\n        return this._revealed || 0;\r\n    }\r\n\r\n    set revealed(n) {\r\n        if (!this._revealed) this._revealed = 0;\r\n        this._revealed += n;\r\n    }\r\n\r\n    parseField(mines) {\r\n        let fld = {};\r\n        let lst = [];\r\n        for (let c = 0; c < this.cols; c++) {\r\n            fld[c] = {};\r\n        }\r\n\r\n        for (let i of mines) {\r\n            // i = y*rows + x;\r\n            let y = Math.floor(i / this.cols);\r\n            let x = i - this.cols * y;\r\n            fld[x][y] = Model.FieldFlags.MINE;\r\n            lst.push({ x, y });\r\n        }\r\n        return [ fld, lst ];\r\n    }\r\n\r\n    isMine(x, y) {\r\n        return this.field[x][y] !== undefined && (this.field[x][y] & Model.FieldFlags.MINE) > 0;\r\n    }\r\n\r\n    isRevealed(x, y) {\r\n        return this.field[x][y] !== undefined && (this.field[x][y] & Model.FieldFlags.REVEALED) > 0;\r\n    }\r\n\r\n    isFlagged(x, y) {\r\n        return this.field[x][y] !== undefined && (this.field[x][y] & Model.FieldFlags.FLAG) > 0;\r\n    }\r\n\r\n    // isRecursive haces las veces de flagholder\r\n    revealTile(x, y, isRecursive) {\r\n        if (this.isMine(x, y)) { throw new Error(\"Mine\"); }\r\n        if (this.isRevealed(x, y) || this.isFlagged(x, y)) { return []; }\r\n        let map = [];\r\n        let adjacent = this.getAdjacentCount(x, y);\r\n        map.push({ x, y, adjacent });\r\n        this.field[x][y] |= Model.FieldFlags.REVEALED;\r\n\r\n        if (adjacent === 0) {\r\n            // top left\r\n            if (x > 0 && y > 0)                             \r\n                map = map.concat(this.revealTile(x - 1, y - 1, true));\r\n            // top\r\n            if (y > 0)                                      \r\n                map = map.concat(this.revealTile(x,     y - 1, true));\r\n            // top right\r\n            if (y > 0 && x < (this.cols - 1))               \r\n                map = map.concat(this.revealTile(x + 1, y - 1, true));\r\n            // left\r\n            if (x > 0)                                      \r\n                map = map.concat(this.revealTile(x - 1, y,     true));\r\n            // right\r\n            if (x < (this.cols - 1))                        \r\n                map = map.concat(this.revealTile(x + 1, y,     true));\r\n            // bottom left\r\n            if (x > 0 && y < (this.rows - 1))               \r\n                map = map.concat(this.revealTile(x - 1, y + 1, true));\r\n            // bottom\r\n            if (y < (this.rows - 1))                        \r\n                map = map.concat(this.revealTile(x,     y + 1, true));\r\n            // bottom right\r\n            if (x < (this.cols - 1) && y < (this.rows - 1)) \r\n                map = map.concat(this.revealTile(x + 1, y + 1, true));\r\n        }\r\n\r\n        if (!isRecursive) {\r\n            this.revealed = map.length;\r\n            this.view.revealMap(map);\r\n        } else {\r\n            return map;\r\n        }\r\n    }\r\n\r\n    markTileFlag(x, y) {\r\n        this.field[x][y] |= Model.FieldFlags.FLAG;\r\n        this.markedFlags++;\r\n\r\n        this.view.setTile(x, y, View.Tiles.FLAG);\r\n\r\n        // Aquí o en setTile? o en Game?\r\n        this.view.setNumber(View.Counters.MINES, this.mineCount - this.markedFlags);\r\n    }\r\n\r\n    markTile(x, y) {\r\n        // Marks (?) a tile\r\n        this.field[x][y] |= Model.FieldFlags.MARK;\r\n        this.field[x][y] &= ~Model.FieldFlags.FLAG;\r\n\r\n        this.view.setTile(x, y, View.Tiles.MARK);\r\n\r\n        // Always subtract one from markedFlags\r\n        this.markedFlags--;\r\n        this.view.setNumber(View.Counters.MINES, this.mineCount - this.markedFlags);\r\n    }\r\n\r\n    unmarkTile(x, y) {\r\n        // Unmarks a tile. Subtracts from markedFlags only if field.x.y has Model.FieldFlags.FLAG\r\n        let dropFlag = (this.field[x][y] & Model.FieldFlags.FLAG) > 0;\r\n\r\n        this.field[x][y] &= ~Model.FieldFlags.MARK;\r\n        this.field[x][y] &= ~Model.FieldFlags.FLAG;\r\n\r\n        this.view.dropTile(x, y);\r\n\r\n        if (dropFlag) {\r\n            this.markedFlags--;\r\n            this.view.setNumber(View.Counters.MINES, this.mineCount - this.markedFlags);\r\n        }\r\n    }\r\n\r\n    getTileType(x, y) {\r\n        // returns FlagTypes\r\n        // If revealed => unknown (invalid op)\r\n        if (!this.field[x][y]) return Model.MarkTypes.UNKNOWN;\r\n\r\n        if ((this.field[x][y] & Model.FieldFlags.REVEALED) > 0) return Model.MarkTypes.UNKNOWN;\r\n\r\n        if ((this.field[x][y] & Model.FieldFlags.FLAG) > 0) return Model.MarkTypes.FLAGGED;\r\n\r\n        if ((this.field[x][y] & Model.FieldFlags.MARK) > 0) return Model.MarkTypes.MARKED;\r\n\r\n        return Model.MarkTypes.UNMARKED;\r\n    }\r\n\r\n    getAdjacentCount(x, y) {\r\n        let count = 0;\r\n        if (x > 0 && y > 0                             && this.isMine(x - 1, y - 1)) count++;\r\n        if (y > 0                                      && this.isMine(x,     y - 1)) count++;\r\n        if (y > 0 && x < (this.cols - 1)               && this.isMine(x + 1, y - 1)) count++;\r\n        if (x > 0                                      && this.isMine(x - 1, y))     count++;\r\n        if (x < (this.cols - 1)                        && this.isMine(x + 1, y))     count++;\r\n        if (x > 0 && y < (this.rows - 1)               && this.isMine(x - 1, y + 1)) count++;\r\n        if (y < (this.rows - 1)                        && this.isMine(x,     y + 1)) count++;\r\n        if (x < (this.cols - 1) && y < (this.rows - 1) && this.isMine(x + 1, y + 1)) count++;\r\n\r\n        return count;\r\n    }\r\n}\r\n\r\nObject.getPrototypeOf(Model).FieldFlags = {\r\n    MINE:     0b1,\r\n    REVEALED: 0b10,\r\n    FLAG:     0b100,\r\n    MARK:     0b1000,\r\n};\r\n\r\nObject.getPrototypeOf(Model).MarkTypes = {\r\n    UNKNOWN: 0,\r\n    UNMARKED: 1,\r\n    FLAGGED: 2,\r\n    MARKED: 3,\r\n};\r\n\r\nexport { Model };","function randomInt(min, max) {\r\n    return Math.floor(min + Math.random() * (max - min))\r\n}\r\n\r\nexport { randomInt };","import { Model } from './model';\r\nimport { View } from './view';\r\nimport { randomInt } from './utils';\r\n\r\nconst DEFAULT_GLOBAL_OPTIONS = Object.freeze({\r\n    marks: false,\r\n    resize: true,\r\n});\r\n\r\nclass Game {\r\n    constructor({ cols, rows, mineCount, globalOptions, mines = [] }) {\r\n\r\n        if (mines.length === 0) {\r\n            // Generar minas\r\n            mines = Game.generateMines(rows, cols, mineCount);\r\n        }\r\n\r\n        if (!globalOptions) {\r\n            globalOptions = DEFAULT_GLOBAL_OPTIONS;\r\n        }\r\n\r\n        this.globalOptions = globalOptions;\r\n        this.model = new Model({ cols, rows, mines });\r\n        this.view = new View({ globalOptions, cols, rows, model: this.model});\r\n        this.model.bindView(this.view);\r\n\r\n        this.gameStarted = false;\r\n        this.interactuable = true;\r\n\r\n        this.initListeners();\r\n    }\r\n\r\n    initListeners() {\r\n        this.listeners = [\r\n            this.onPlaygroundClick.bind(this),\r\n            this.onPlaygroundRightClick.bind(this),\r\n        ];\r\n        this.view.addEventListener(\"click\", this.listeners[0]);\r\n        this.view.addEventListener(\"rightClick\", this.listeners[1]);\r\n    }\r\n\r\n    startGame() {\r\n        this.gameStarted = true;\r\n        this.startTimer();\r\n    }\r\n\r\n    stopGame() {\r\n        this.interactuable = false;\r\n        this.stopTimer();\r\n    }\r\n\r\n    startTimer() {\r\n        this.timerOn = true;\r\n        this.timerStart = performance.now();\r\n        setTimeout(this.doTimer.bind(this), 1000);\r\n    }\r\n\r\n    stopTimer() {\r\n        this.timerOn = false;\r\n    }\r\n\r\n    doTimer() {\r\n        if (!this.timerOn) return;\r\n        this.view.setNumber(View.Counters.TIME, Math.floor((performance.now() - this.timerStart) / 1000));\r\n        let nextTimer = (performance.now() - this.timerStart) % 1000;\r\n        setTimeout(this.doTimer.bind(this), 1000 - nextTimer);\r\n    }\r\n\r\n    onPlaygroundClick(event) {\r\n        if (!this.interactuable) return false;\r\n        if (!this.gameStarted) {\r\n            this.startGame();\r\n        }\r\n\r\n        if (this.model.isRevealed(event.detail.x, event.detail.y)) {\r\n            return false; // Noop\r\n        }\r\n\r\n        if (this.model.isMine(event.detail.x, event.detail.y)) {\r\n            if (!this.model.isFlagged(event.detail.x, event.detail.y)) {\r\n                this.stopGame();\r\n                this.view.gameLost({ x: event.detail.x, y: event.detail.y });\r\n            }\r\n        } else {\r\n            this.model.revealTile(event.detail.x, event.detail.y);\r\n        }\r\n\r\n        if (this.isComplete()) {\r\n            this.stopGame();\r\n            this.view.gameWon();\r\n        }\r\n    }\r\n    \r\n    onPlaygroundRightClick(event) {\r\n        if (!this.interactuable) return false;\r\n        if (!this.gameStarted) {\r\n            this.startGame();\r\n        }\r\n\r\n        if (this.model.isRevealed(event.detail.x, event.detail.y)) {\r\n            return false; // Noop\r\n        }\r\n\r\n        switch (this.model.getTileType(event.detail.x, event.detail.y)) {\r\n            case Model.MarkTypes.UNMARKED:\r\n            case Model.MarkTypes.UNKNOWN:\r\n                // Just flag\r\n                this.model.markTileFlag(event.detail.x, event.detail.y);\r\n            break;\r\n            case Model.MarkTypes.FLAGGED:\r\n                // Unmark if !global.marks, mark (?) if true\r\n                if (this.globalOptions.marks) {\r\n                    this.model.markTile(event.detail.x, event.detail.y);\r\n                } else {\r\n                    this.model.unmarkTile(event.detail.x, event.detail.y);\r\n                }\r\n            break;\r\n            case Model.MarkTypes.MARKED:\r\n                // Always unmark\r\n                this.model.unmarkTile(event.detail.x, event.detail.y);\r\n            break;\r\n        }\r\n    }\r\n\r\n    isComplete() {\r\n        return this.model.revealed === this.model.cols * this.model.rows - this.model.mineCount;\r\n    }\r\n\r\n    destroy() {\r\n        this.view.removeEventListener(\"click\", this.listeners[0]);\r\n        this.view.removeEventListener(\"rightClick\", this.listeners[1]);\r\n        this.view.destroy();\r\n    }\r\n\r\n    static generateMines(rowCount, colCount, mineCount) {\r\n\r\n        let max = rowCount * colCount - 1;\r\n        let mines = [];\r\n    \r\n        while (mines.length < mineCount) {\r\n            let rnd = randomInt(0, max);\r\n            if (!mines.includes(rnd)) {\r\n                mines.push(rnd);\r\n            }\r\n        }\r\n    \r\n        return mines;\r\n    }\r\n}\r\n\r\nexport { Game };","import { Game } from './game';\r\nconst GAME_MODES = {\r\n    \"Beginner\": {\r\n        rows: 10,\r\n        cols: 10,\r\n        mineCount: 10,\r\n    },\r\n    \"Intermediate\": {\r\n        rows: 16,\r\n        cols: 16,\r\n        mineCount: 40,\r\n    },\r\n    \"Expert\": {\r\n        rows: 16,\r\n        cols: 31,\r\n        mineCount: 99,\r\n    },\r\n    \"Custom\": {\r\n        rows: 1,\r\n        cols: 1,\r\n        mines: 1,\r\n    },\r\n};\r\n\r\nwindow.gi = {};\r\nwindow.globalOptions = {\r\n    marks: true,\r\n    resize: true,\r\n    difficulty: \"Intermediate\",\r\n};\r\n\r\nwindow.addEventListener(\"load\", function() {\r\n    window.g = function() {\r\n        let params = {\r\n            globalOptions: window.globalOptions,\r\n        };\r\n        Object.assign(params, GAME_MODES[window.globalOptions.difficulty]);\r\n        this.game = new Game(params);\r\n    };\r\n\r\n    function newGame() {\r\n        if (window.gi && window.gi.game) {\r\n            window.gi.game.destroy();\r\n        }\r\n        window.gi = {};\r\n        g.call(window.gi);\r\n    }\r\n\r\n    function changeDifficulty(difficulty) {\r\n        document.querySelector(\"li.checked[data-action=change-difficulty]\").classList.remove(\"checked\");\r\n        document.querySelector(`li[data-action=\"change-difficulty\"][data-difficulty=\"${difficulty}\"]`).classList.add(\"checked\");\r\n        window.globalOptions.difficulty = difficulty;\r\n        newGame();\r\n    }\r\n\r\n    function toggleMarks() {\r\n        window.globalOptions.marks = !window.globalOptions.marks;\r\n\r\n        document.querySelector(\"li[data-action=toggle-marks]\").classList.toggle(\"checked\");\r\n    }\r\n\r\n    newGame();\r\n\r\n    document.getElementById(\"face-button\").addEventListener(\"click\", function() {\r\n        newGame();\r\n    });\r\n\r\n    Array.from(document.querySelectorAll(\"#menubar > li\")).forEach(li => {\r\n        li.addEventListener(\"click\", function() {\r\n            if (li.classList.contains(\"open\")) {\r\n                li.classList.remove(\"open\");\r\n            } else {\r\n                Array.from(document.querySelectorAll(\"#menubar > li.open\")).forEach(l => {\r\n                    l.classList.remove(\"open\");\r\n                });\r\n                li.classList.add(\"open\");\r\n            }\r\n        });\r\n    });\r\n\r\n    document.querySelector(\"#menubar\").addEventListener(\"click\", function(event) {\r\n        if (!event.target.dataset.action) { return; }\r\n        switch (event.target.dataset.action) {\r\n            case \"new-game\":\r\n                newGame();\r\n            break;\r\n            case \"change-difficulty\":\r\n                changeDifficulty(event.target.dataset.difficulty);\r\n            break;\r\n            case \"toggle-marks\":\r\n                toggleMarks();\r\n            break;\r\n        }\r\n    });\r\n\r\n    if (window.globalOptions.marks) {\r\n        document.querySelector(\"li[data-action=toggle-marks]\").classList.add(\"checked\");\r\n    }\r\n\r\n    document.querySelector(`li[data-action=\"change-difficulty\"][data-difficulty=\"${window.globalOptions.difficulty}\"]`).classList.add(\"checked\");\r\n});"]}